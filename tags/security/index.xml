<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Security on Jaehyeon Kim</title><link>https://jaehyeon.me/tags/security/</link><description>Recent content in Security on Jaehyeon Kim</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright Â© 2023-2024 Jaehyeon Kim. All Rights Reserved.</copyright><lastBuildDate>Thu, 20 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jaehyeon.me/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Kafka Development with Docker - Part 11 Kafka Authorization</title><link>https://jaehyeon.me/blog/2023-07-20-kafka-development-with-docker-part-11/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><guid>https://jaehyeon.me/blog/2023-07-20-kafka-development-with-docker-part-11/</guid><description>&lt;p>In the previous posts, we discussed how to implement client authentication by TLS (SSL or TLS/SSL) and SASL authentication. One of the key benefits of client authentication is achieving user access control. Kafka ships with a pluggable, out-of-the box authorization framework, which is configured with the &lt;em>authorizer.class.name&lt;/em> property in the server configuration and stores Access Control Lists (ACLs) in the cluster metadata (either Zookeeper or the KRaft metadata log). In this post, we will discuss how to configure Kafka authorization with Java and Python client examples while SASL is kept for client authentication.&lt;/p></description><enclosure url="https://jaehyeon.me/blog/2023-07-20-kafka-development-with-docker-part-11/featured.png" length="458848" type="image/png"/></item><item><title>Kafka Development with Docker - Part 10 SASL Authentication</title><link>https://jaehyeon.me/blog/2023-07-13-kafka-development-with-docker-part-10/</link><pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate><guid>https://jaehyeon.me/blog/2023-07-13-kafka-development-with-docker-part-10/</guid><description><![CDATA[<p>In the previous post, we discussed TLS (SSL or TLS/SSL) authentication to improve security. It enforces two-way verification where a client certificate is verified by Kafka brokers. Client authentication can also be enabled by <a href="https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer" target="_blank" rel="noopener noreferrer">Simple Authentication and Security Layer (SASL)<i class="fas fa-external-link-square-alt ms-1"></i></a>, and we will discuss how to implement SASL authentication with Java and Python client examples in this post.</p>
<ul>
<li><a href="/blog/2023-05-04-kafka-development-with-docker-part-1">Part 1 Cluster Setup</a></li>
<li><a href="/blog/2023-05-18-kafka-development-with-docker-part-2">Part 2 Management App</a></li>
<li><a href="/blog/2023-05-25-kafka-development-with-docker-part-3">Part 3 Kafka Connect</a></li>
<li><a href="/blog/2023-06-01-kafka-development-with-docker-part-4">Part 4 Producer and Consumer</a></li>
<li><a href="/blog/2023-06-08-kafka-development-with-docker-part-5">Part 5 Glue Schema Registry</a></li>
<li><a href="/blog/2023-06-15-kafka-development-with-docker-part-6">Part 6 Kafka Connect with Glue Schema Registry</a></li>
<li><a href="/blog/2023-06-22-kafka-development-with-docker-part-7">Part 7 Producer and Consumer with Glue Schema Registry</a></li>
<li><a href="/blog/2023-06-29-kafka-development-with-docker-part-8">Part 8 SSL Encryption</a></li>
<li><a href="/blog/2023-07-06-kafka-development-with-docker-part-9">Part 9 SSL Authentication</a></li>
<li><a href="/blog/2023-07-13-kafka-development-with-docker-part-10/#">Part 10 SASL Authentication</a> (this post)</li>
<li><a href="/blog/2023-07-20-kafka-development-with-docker-part-11">Part 11 Kafka Authorization</a></li>
</ul>

<h2 id="certificate-setup" data-numberify>Certificate Setup<a class="anchor ms-1" href="#certificate-setup"></a></h2>
<p>As we will leave Kafka communication to remain encrypted, we need to keep the components for SSL encryption. The details can be found in <a href="/blog/2023-06-29-kafka-development-with-docker-part-8">Part 8</a>, and those components can be generated by <a href="https://github.com/jaehyeon-kim/kafka-pocs/blob/main/kafka-dev-with-docker/part-10/generate.sh" target="_blank" rel="noopener noreferrer"><em>generate.sh</em><i class="fas fa-external-link-square-alt ms-1"></i></a>. Once we execute the script, the following files are created.</p>]]></description><enclosure url="https://jaehyeon.me/blog/2023-07-13-kafka-development-with-docker-part-10/featured.png" length="471947" type="image/png"/></item><item><title>Kafka Development with Docker - Part 9 SSL Authentication</title><link>https://jaehyeon.me/blog/2023-07-06-kafka-development-with-docker-part-9/</link><pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate><guid>https://jaehyeon.me/blog/2023-07-06-kafka-development-with-docker-part-9/</guid><description><![CDATA[<p>In the previous post, we discussed how to configure TLS (SSL or TLS/SSL) encryption with Java and Python client examples. SSL encryption is a one-way verification process where a server certificate is verified by a client via <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_handshake" target="_blank" rel="noopener noreferrer">SSL Handshake<i class="fas fa-external-link-square-alt ms-1"></i></a>. To improve security, we can add client authentication either by enforcing two-way verification where a client certificate is verified by Kafka brokers (SSL authentication). Or we can choose a separate authentication mechanism, which is typically <a href="https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer" target="_blank" rel="noopener noreferrer">Simple Authentication and Security Layer (SASL)<i class="fas fa-external-link-square-alt ms-1"></i></a>. In this post, we will discuss how to implement SSL authentication with Java and Python client examples while SASL authentication is covered in the next post.</p>]]></description><enclosure url="https://jaehyeon.me/blog/2023-07-06-kafka-development-with-docker-part-9/featured.png" length="471471" type="image/png"/></item><item><title>Kafka Development with Docker - Part 8 SSL Encryption</title><link>https://jaehyeon.me/blog/2023-06-29-kafka-development-with-docker-part-8/</link><pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate><guid>https://jaehyeon.me/blog/2023-06-29-kafka-development-with-docker-part-8/</guid><description><![CDATA[<p>By default, Apache Kafka communicates in <em>PLAINTEXT</em>, which means that all data is sent without being encrypted. To secure communication, we can configure Kafka clients and other components to use <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="noopener noreferrer">Transport Layer Security (TLS)<i class="fas fa-external-link-square-alt ms-1"></i></a> encryption. Note that TLS is also referred to <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">Secure Sockets Layer (SSL)<i class="fas fa-external-link-square-alt ms-1"></i></a> or TLS/SSL. SSL is the predecessor of TLS, and has been deprecated since June 2015. However, it is used in configuration and code instead of TLS for historical reasons. In this post, SSL, TLS and TLS/SSL will be used interchangeably. SSL encryption is a one-way verification process where a server certificate is verified by a client via <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_handshake" target="_blank" rel="noopener noreferrer">SSL Handshake<i class="fas fa-external-link-square-alt ms-1"></i></a>. Moreover, we can improve security by adding client authentication. For example, we can enforce two-way verification so that a client certificate is verified by Kafka brokers as well (<em>SSL Authentication</em>). Alternatively we can choose a separate authentication mechanism and typically <a href="https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer" target="_blank" rel="noopener noreferrer">Simple Authentication and Security Layer (SASL)<i class="fas fa-external-link-square-alt ms-1"></i></a> is used (<em>SASL Authentication</em>). In this post, we will discuss how to configure SSL encryption with Java and Python client examples while SSL and SASL client authentication will be covered in later posts.</p>]]></description><enclosure url="https://jaehyeon.me/blog/2023-06-29-kafka-development-with-docker-part-8/featured.png" length="469311" type="image/png"/></item></channel></rss>