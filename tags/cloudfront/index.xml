<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>CloudFront on Jaehyeon's Personal Site</title><link>https://jaehyeon-kim.github.io/tags/cloudfront/</link><description>Recent content in CloudFront on Jaehyeon's Personal Site</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright Â© 2023-2023 Jaehyeon Kim. All Rights Reserved.</copyright><lastBuildDate>Mon, 17 Apr 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://jaehyeon-kim.github.io/tags/cloudfront/index.xml" rel="self" type="application/rss+xml"/><item><title>Serverless Data Product POC Backend Part IV</title><link>https://jaehyeon-kim.github.io/blog/2017-04-17-serverless-data-product-4/</link><pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate><guid>https://jaehyeon-kim.github.io/blog/2017-04-17-serverless-data-product-4/</guid><description>In the previous posts, it is discussed how to package/deploy a R model with AWS Lambda and to expose the Lambda function via Amazon API Gateway. Main benefits of serverless architecture is cost-effectiveness and being hassle-free from provisioning/managing servers. While the API returns a predicted admission status value given GRE, GPA and Rank, there is an issue if it is served within a web application: Cross-Origin Resource Sharing (CORS). This post discusses how to resolve this issue by updating API configuration and the Lambda function handler with a simple web application.</description><enclosure url="https://jaehyeon-kim.github.io/blog/2017-04-17-serverless-data-product-4/featured.png" length="225463" type="image/png"/></item></channel></rss>