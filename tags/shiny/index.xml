<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Shiny on Jaehyeon Kim</title><link>https://jaehyeon.me/tags/shiny/</link><description>Recent content in Shiny on Jaehyeon Kim</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright Â© 2023-2024 Jaehyeon Kim. All Rights Reserved.</copyright><lastBuildDate>Sat, 26 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://jaehyeon.me/tags/shiny/index.xml" rel="self" type="application/rss+xml"/><item><title>Shiny to Vue.js</title><link>https://jaehyeon.me/blog/2018-05-26-shiny-to-vue.js/</link><pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate><guid>https://jaehyeon.me/blog/2018-05-26-shiny-to-vue.js/</guid><description>&lt;p>In the &lt;a href="/blog/2018-05-19-asyn-shiny-and-its-limitation">last post&lt;/a>, the async feature of Shiny was discussed. Although it is a remarkable step forward to web development in R, it is not to the full extent that a Javascript application can bring. In fact, (long running) requests of a user (or session) are not impacted by those of other users (or sessions) but, for a given user, all requests are handled sequentially. On the other hand, it is not the case for a Javascript-backed app where all requests are processed asynchronously.&lt;/p></description><enclosure url="https://jaehyeon.me/blog/2018-05-26-shiny-to-vue.js/featured.png" length="247205" type="image/png"/></item><item><title>Async Shiny and Its Limitation</title><link>https://jaehyeon.me/blog/2018-05-19-asyn-shiny-and-its-limitation/</link><pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate><guid>https://jaehyeon.me/blog/2018-05-19-asyn-shiny-and-its-limitation/</guid><description><![CDATA[<p>A Shiny app is served by one (<em>single-threaded blocking</em>) process by <a href="https://www.rstudio.com/products/shiny/download-server/" target="_blank" rel="noopener noreferrer">Open Source Shiny Server<i class="fas fa-external-link-square-alt ms-1"></i></a>. This causes a scalability issue because all requests are handled one by one in a queue. Recently the creator of <em>Shiny</em> introduced the <a href="https://rstudio.github.io/promises/" target="_blank" rel="noopener noreferrer">promises<i class="fas fa-external-link-square-alt ms-1"></i></a> package, which brings <em>asynchronous programming capabilities to R</em>. This is a remarkable step forward to web development in R.</p>]]></description><enclosure url="https://jaehyeon.me/blog/2018-05-19-asyn-shiny-and-its-limitation/featured.png" length="247205" type="image/png"/></item><item><title>Some Thoughts on Shiny Open Source - Render Multiple Pages</title><link>https://jaehyeon.me/blog/2016-06-27-shiny-open-source-render-multiple-pages/</link><pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate><guid>https://jaehyeon.me/blog/2016-06-27-shiny-open-source-render-multiple-pages/</guid><description><![CDATA[<p>R Shiny applications are served as a single page application and it is not built to render multiple pages. There are benefits of rendering multiple pages such as code management and implement authentication. In this page, we discuss how to implement multi-page rendering in a Shiny app.</p>
<p>As indicated above, Shiny is not designed to render multiple pages and, in general, the UI is rendered on the fly as defined in <em>ui.R</em> or <em>app.R</em>. However this is not the only way as the UI can be rendered as a html output using <code>htmlOutput()</code> in <em>ui.R</em> and <code>renderUI()</code> in <em>server.R</em>. In this post, rendering multiple pages will be illustrated using an <a href="https://github.com/jaehyeon-kim/shiny-multipage" target="_blank" rel="noopener noreferrer"><strong>example application</strong><i class="fas fa-external-link-square-alt ms-1"></i></a>.</p>]]></description></item><item><title>Some Thoughts on Shiny Open Source - Internal Load Balancing</title><link>https://jaehyeon.me/blog/2016-05-23-shiny-open-source-internal-load-balancing/</link><pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate><guid>https://jaehyeon.me/blog/2016-05-23-shiny-open-source-internal-load-balancing/</guid><description>&lt;p>Shiny is an interesting web framework that helps create a web application quickly. If it targets a large number of users, however, there are several limitations and it is so true when the open source version of Shiny is in use. It would be possible to tackle down some of the limitations with the enterprise version but it is not easy to see enough examples of Shiny applications in production environment. While whether Shiny can be used in production environment is a controversial issue, this series of posts illustrate some ways to use &lt;strong>open source Shiny&lt;/strong> a bit more wisely. Specifically the following topics are going to be covered.&lt;/p></description></item></channel></rss>